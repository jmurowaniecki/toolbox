#!/bin/bash

STD_FOLDER='/var/www/preview/'

fg_black=`tput setaf 0`
fg_red=`tput setaf 1`
fg_green=`tput setaf 2`
fg_yellow=`tput setaf 3`
fg_blue=`tput setaf 4`
fg_magenta=`tput setaf 5`
fg_cyan=`tput setaf 6`
fg_white=`tput setaf 7`
fg_reset=`tput sgr0`

declare -A color
    color[warn]=${fg_yellow}
    color[error]=${fg_red}
    color[option]=${fg_cyan}
    color[command]=${fg_green}
    color[reset]=${fg_reset}

function try_catch {
    echo "
Use ${color[command]}\`${0} [action]\`${color[reset]}

Actions:
    ${color[option]}list${color[reset]}                    List projects
    ${color[option]}new${color[reset]} [project] [email]   New project
    ${color[option]}del${color[reset]} [project]           Delete project
    ${color[option]}user${color[reset]} [list|add|del]     Manage users"
}

function try_trapp {
    echo -e "\nCanceled." #\n^^vv<><>AB"
    exit 1
}

trap 'try_catch $*' ERR
trap 'try_trapp $*' INT


function scaffold_new {
    if [ ${#} -lt 1 ]
    then
        echo "
Use ${color[command]}\`${0} new [project_name]\`${color[reset]} to create a new project into ${color[option]}${STD_FOLDER}${color[option]}."
    else
        directory="${STD_FOLDER}${1}"

        #if [ "$2" == "" ]
        #then
        #    username=$1
        #else
        #    username=$2
        #fi

        username=${2:-${1}}

        if [ -d "${directory}" ]
        then
            echo "${color[error]}Error:${color[reset]} directory already exists.
Did you mean ${color[command]}\`${0} user add ${1} ${username}\`${color[reset]}?"
        else
            read -s -p "${color[warn]}Warning${color[reset]}:

I'll create a new user named ${color[option]}${username}${color[reset]}.
Their home directory will be ${color[option]}${directory}${color[reset]}.
This folder will be accessible by ftp and http protocols.

So we need to apply a password: " password
            encrypted=`openssl passwd -1 ${password}`
            useradd -m -s /bin/false -p ${encrypted} ${username} -d "${directory}"
            htpasswd -bcmd "${directory}/.htpasswd" "${username}" "${password}"
            smbpasswd -a -w "${password}" "${username}"
            echo "AuthName \"Projeto ${1}\"
AuthType Basic
AuthUserFile ${directory}/.htpasswd
require valid-user" > "${directory}/.htaccess"
        fi
    fi
}



function scaffold_del {
    echo "Can't you be serious.. ¬¬"
    # Do you wanna backup user's home folder to an inaccessible tarball file?
    # Do you wanna remove user's home folder?
    # Do you wanna remove user's role/access?
    # Are you sure 'bout this?
}



function scaffold_user {
    directory="${STD_FOLDER}${2}"

    case ${1} in
        list|'')
            if [ -z "${2}" ]
            then
                echo -e "${color[error]}Error${color[reset]}: blank project name."
                scaffold_list suitable options
            elif [ -d "${directory}" ]
            then
                echo -e "Listing users from project ${color[option]}${2}${color[reset]}:"
                for users in `cat "${directory}/.htpasswd"|awk -F':' '{print($1)}'`
                do
                    echo -e "\t> ${color[option]}${users}${color[reset]}"
                done
            else
                echo -e "${color[error]}Error${color[reset]}: invalid project name ${color[option]}${2}${color[reset]}. It really exists?"
                scaffold_list available projects
            fi
            ;;

        add)
            if [ ${#} -lt 3 ]
            then
                echo -e "${color[error]}Error${color[reset]}: invalid options. You need to set up the project name and user names to be added."
            elif [ -z "${2}" ]
            then
                echo -e "${color[error]}Error${color[reset]}: blank project name? Try again with ${color[command]}\`${0} user add project_name user_name\`${color[reset]}."
            elif [ -d "${directory}" ]
            then
                echo -e "Adding users to project ${color[option]}${2}${color[reset]}."
            else
                echo -e "${color[error]}Error${color[reset]}: invalid project name ${color[option]}${2}${color[reset]}."
            fi
            ;;

        del)
            echo -e "Removing users from project ${color[option]}${2}${color[reset]}."
            ;;

        *)
            echo -e "${color[error]}Error${color[reset]}: unknow option ${color[option]}${1}${color[reset]}."
            ;;
    esac
}



function scaffold_list {
    echo "Listing possible available projects:"
    for directory in `ls ${STD_FOLDER}`
    do
        echo -e "\t> ${color[option]}${directory}${color[reset]}"
    done
}




if [ `whoami` == 'root' ]
then
    if [ ${#} -lt 1 ]
    then
        try_catch
    else
        echo
        case ${1} in
            user|new|del|list)
                scaffold_${1} ${2} ${3} ${4} ${5}
                ;;
            *)
                try_catch some messages
                ;;
        esac
    fi
else
    sudo ${0} $* && exit 0
    echo -e "${color[error]}Error${color[reset]}: Woha! You doesn't have necessary privileges.. Try again with ${color[command]}\`sudo ${0}..\`${color[reset]}"
fi
